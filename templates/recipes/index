{% extends "base" %}

{% block content %}
<div style=width:600px;>
<p><b>For Cooks</b><br>
Use this interface to my recipe blog. The links in bold will be most useful to you.
Find what you want, click through, and you can print the recipes on your printer, or include your laptop as a kitchen item. 
Note: Just as this web app is under development, so are my recipes.</p>

<p><b>For Developers (which can, of course, include cooks)</b><br>
 
I'm both a cook and a nerd. I wrote this Python/Django web app to experiment with scraping, RSS Feeds and API's. Those are three different
ways to get content from a website or blog. Its concept is that it serves as a front end to allow various ways to 
find recipes in my blogspot recipe blog, <a href="https://thecattycook.blogspot.com/">The Catty Cook</a>. Each link here
represents a Django view.  </p>

<p>

</p>
<br>
<h1>    For Cooks</h1>
 <span style="font-size:15px">
 <ol>
    <li><b><a href="/modelsearch">Fast Search! Type in any word(s), separated by commas</a></b>	 
	<br><small>Shows results in order of relevance, which is based on number of criteria met. Can type ingredients or even
	 kitchen tools.  
	</small></li>

    <li><a href="/get"><b>Find all Recipes Alphabetically </b>  </a><br><small>Uses Google Blogger API and requests to get 
	the feed, one year at a time to prevent a timeout, then loads the json alphabetically. 
	Does not store them in a model.</small>  </li>

	 



</ol>   
</span>   
<br><br>
<h1>For Developers</h1>
<h2>And don't worry if you break something</h2>
<span style="font-size:10px">
<ol> 			
	<li><a href="/count-words">Find pages with too little content</a><br><small> This is helpful for monetizing through 
	Google Adsense, as they expect a minium of around 300 characters.</small></li>    

	<li><a href="/getchron">View all Recipes Chronologically  </a><br><small>Uses Google Blogger API and requests
	to get the feed, one year at a time to prevent a timeout, then loads the json chronologically.</small> </li>

	<li><a href="/scrape">View Recipes scraped from the home page  </a><br><small>Uses requests and beautifulSoup to scrape
	recipes only from the home page. The results are limited.</small></li>     

	<! --  The next two views are attempting to be the same. The first is a functional view; the second a class-based view -->
    <li><a href="/retrieve-recipes">Retrieve the URL's from the model</a><br><small>Uses a functional view.</small></li>   
	<li><a href="retrieve-recipes-classbased">Retrieve the URL's from the model</a> <br><small>Uses a class based view. This 
	view has no path, so it's "retrieve-recipes-classbased". Note that class-based is faster than functional.
	</small></li>    

  <hr>

	<li><a href="/get-and-store">Find all Recipes in alphabetical order </a></b><br><small>Uses requests to get
	all the post urls from Google Blogger API,  then store them each in one record in a model
	(a mysql or postgres database).</small></li>

	<li><a href = "/scrapecontents">Scrape all post contents and stuff them in a model.</a><b>Do not run this until you have run "Find all Recipes" above</b><small>
	<br>This is a simple crawler that crawls the entire recipe blog periodically. It then stores the results in 
	model. The new faster search at the top of this page searches the model rather than the actual pages on my blog. This 
	is called an index search, and it's a lot faster than a rifle search. An index search is how google works. This view
	 relies on the recipes retrieved in the above view.</small></li>   
   <hr> 

    <li><a href="/suggestions">Select ingredients from suggestions</a><br>
	(This is a slow rifle search for demo purpose only.)<br>
	<small>Shows all database keywords with checkboxes. Results are ordered by relevance 
	(number of search criteria met). </small> </li>
 		
 
</ol>
</span> 

</div>
{% endblock content %}




